{"version":3,"sources":["components/Todo/Todo.jsx","API/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["Todo","todo","selectedUser","className","classNames","completed","type","readOnly","checked","title","onClick","userId","request","url","fetch","then","result","ok","Error","status","json","TodoList","state","todos","text","select","preparedTodos","onChange","e","target","value","name","setState","filterByTitle","selectCategory","a","response","data","this","prevState","filter","includes","property","props","selectedUserId","length","placeholder","map","key","id","Component","CurrentUser","user","loadData","onClear","email","phone","App","selectUser","clearUserId","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5adb9a0a.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function Todo({ todo, selectedUser}) {\n  return (\n    <li className={classNames(\n      'TodoList__item',\n      { 'TodoList__item--unchecked': todo.completed },\n      { 'TodoList__item--checked': !todo.completed },\n    )}\n    >\n      <label>\n        <input\n          type=\"checkbox\"\n          readOnly\n          checked={!todo.completed}\n        />\n        <p>{todo.title}</p>\n      </label>\n\n      <button\n        className=\"\n      TodoList__user-button\n      TodoList__user-button--selected\n      button\n    \"\n        type=\"button\"\n        onClick={() => selectedUser(todo.userId)}\n      >\n        User&nbsp;#\n        {todo.userId}\n      </button>\n    </li>\n  );\n}\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    completed: PropTypes.bool,\n    createdAt: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    updatedAt: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number,\n  }).isRequired,\n  selectedUser: PropTypes.func.isRequired,\n};\n","const BASE__URL = 'https://mate-api.herokuapp.com/';\n\nconst request = url => fetch(`${BASE__URL}${url}`)\n  .then((result) => {\n    if (!result.ok) {\n      throw new Error(`${result.status}`);\n    }\n\n    return result.json();\n  });\n\nexport const getTodos = () => request('todos')\n  .then(response => response.data);\n\nexport const getUser = userId => request(`users/${userId}`)\n  .then(response => response.data);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\nimport { getTodos } from '../../API/api';\n\nimport './TodoList.scss';\n\nexport class TodoList extends Component {\n  state = {\n    todos: [],\n    text: '',\n    select: '',\n    preparedTodos: [],\n  }\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      todos, preparedTodos: todos,\n    });\n  }\n\n  onChange = (e) => {\n    const { value, name, type } = e.target;\n\n    this.setState({ [name]: value });\n\n    switch (type) {\n      case 'text':\n        return this.filterByTitle();\n\n      default:\n        return this.selectCategory(value);\n    }\n  }\n\n  filterByTitle() {\n    this.setState(prevState => ({\n      preparedTodos: prevState.todos.filter(\n        todo => ((todo.title !== null)\n          ? todo.title.includes(prevState.text)\n          : null),\n      ),\n    }));\n  }\n\n  selectCategory(property) {\n    switch (property) {\n      case 'completed':\n        this.setState(prevState => ({\n          preparedTodos: prevState.todos.filter(\n            todo => !todo.completed,\n          ),\n        }));\n        break;\n\n      case 'active':\n        this.setState(prevState => ({\n          preparedTodos: prevState.todos.filter(\n            todo => todo.completed,\n          ),\n        }));\n        break;\n\n      default:\n        this.setState(prevState => ({\n          preparedTodos: [...prevState.todos],\n        }));\n    }\n  }\n\n  render() {\n    const { selectedUser, selectedUserId } = this.props;\n    const { todos, select, text, preparedTodos } = this.state;\n    const { onChange } = this;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        {todos.length > 0 && (\n          <>\n            <input\n              className=\"input is-rounded\"\n              type=\"text\"\n              value={text}\n              name=\"text\"\n              placeholder=\"type title here\"\n              onChange={onChange}\n            />\n            <div className=\"select is-rounded\">\n              <select\n                name=\"select\"\n                value={select}\n                onChange={onChange}\n              >\n                <option>all</option>\n                <option>active</option>\n                <option>completed</option>\n              </select>\n            </div>\n          </>\n        )}\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {preparedTodos.map(todo => (\n              <Todo\n                key={todo.id}\n                todo={todo}\n                selectedUser={selectedUser}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  selectedUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../API/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends Component {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  loadData() {\n    getUser(this.props.userId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { userId, onClear } = this.props;\n    const { user } = this.state;\n\n    if (!user) {\n      return (<span> Wait please </span>);\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user:  ${userId}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          className=\"button is-dark\"\n          onClick={() => onClear()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport 'bulma';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    selectedUserId: 0,\n  };\n\n  selectUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  clearUserId = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { selectedUserId } = this.state;\n    const { selectUser, clearUserId } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUser={selectUser}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClear={clearUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}