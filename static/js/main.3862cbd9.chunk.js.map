{"version":3,"sources":["components/Todo/Todo.jsx","API/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["Todo","todo","selectedUser","className","classNames","completed","type","readOnly","checked","title","onClick","userId","request","url","a","fetch","response","ok","Error","status","json","getTodos","data","getUser","TodoList","state","todos","inputValue","selectValue","preparedTodos","onChange","e","target","value","name","setState","filterByTitle","selectCategory","this","prevState","filter","includes","property","props","length","placeholder","map","key","id","Component","CurrentUser","user","loadUser","onClear","email","phone","App","selectedUserId","selectUser","clearUserId","React","ReactDOM","render","document","getElementById"],"mappings":"2ZAIO,SAASA,EAAT,GAAsC,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,aAC3B,OACE,wBAAIC,UAAWC,IACb,iBACA,CAAE,4BAA6BH,EAAKI,WACpC,CAAE,2BAA4BJ,EAAKI,aAGnC,+BACE,2BACEC,KAAK,WACLC,UAAQ,EACRC,SAAUP,EAAKI,YAEjB,2BAAIJ,EAAKQ,QAGX,4BACEN,UAAU,iEAKVG,KAAK,SACLI,QAAS,kBAAMR,EAAaD,EAAKU,UAPnC,YAUGV,EAAKU,SC/Bd,IAEMC,EAAO,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACSC,MAAM,GAAD,OAHZ,mCAGY,OAAgBF,IAD9B,WACRG,EADQ,QAGAC,GAHA,sBAIN,IAAIC,MAAJ,UAAaF,EAASG,SAJhB,gCAOPH,EAASI,QAPF,2CAAH,sDAUAC,EAAQ,uCAAG,4BAAAP,EAAA,sEACCF,EAAQ,SADT,cAChBI,EADgB,yBAGfA,EAASM,MAHM,2CAAH,qDAMRC,EAAO,uCAAG,WAAMZ,GAAN,eAAAG,EAAA,sEACEF,EAAQ,SAAD,OAAUD,IADnB,cACfK,EADe,yBAGdA,EAASM,MAHK,2CAAH,sDCXPE,G,MAAb,4MACEC,MAAQ,CACNC,MAAO,GACPC,WAAY,GACZC,YAAa,GACbC,cAAe,IALnB,EAgBEC,SAAW,SAACC,GAAO,IAAD,EACcA,EAAEC,OAAxBC,EADQ,EACRA,MAAOC,EADC,EACDA,KAAM5B,EADL,EACKA,KAIrB,OAFA,EAAK6B,SAAL,eAAiBD,EAAOD,IAEhB3B,GACN,IAAK,OACH,OAAO,EAAK8B,gBAEd,QACE,OAAO,EAAKC,eAAeJ,KA1BnC,8FAQE,4BAAAnB,EAAA,sEACsBO,IADtB,OACQK,EADR,OAGEY,KAAKH,SAAS,CACZT,QAAOG,cAAeH,IAJ1B,gDARF,iFA8BE,WACEY,KAAKH,UAAS,SAAAI,GAAS,MAAK,CAC1BV,cAAeU,EAAUb,MAAMc,QAC7B,SAAAvC,GAAI,OAAqB,OAAfA,EAAKQ,MACXR,EAAKQ,MAAMgC,SAASF,EAAUZ,YAC9B,cAnCZ,4BAwCE,SAAee,GACb,OAAQA,GACN,IAAK,YACHJ,KAAKH,UAAS,SAAAI,GAAS,MAAK,CAC1BV,cAAeU,EAAUb,MAAMc,QAC7B,SAAAvC,GAAI,OAAKA,EAAKI,iBAGlB,MAEF,IAAK,SACHiC,KAAKH,UAAS,SAAAI,GAAS,MAAK,CAC1BV,cAAeU,EAAUb,MAAMc,QAC7B,SAAAvC,GAAI,OAAIA,EAAKI,iBAGjB,MAEF,QACEiC,KAAKH,UAAS,SAAAI,GAAS,MAAK,CAC1BV,cAAc,YAAKU,EAAUb,cA5DvC,oBAiEE,WAAU,IACAxB,EAAiBoC,KAAKK,MAAtBzC,aADD,EAEmDoC,KAAKb,MAAvDC,EAFD,EAECA,MAAOE,EAFR,EAEQA,YAAaD,EAFrB,EAEqBA,WAAYE,EAFjC,EAEiCA,cAChCC,EAAaQ,KAAbR,SAER,OACE,yBAAK3B,UAAU,YACb,sCACCuB,EAAMkB,OAAS,GACd,oCACE,2BACEzC,UAAU,mBACVG,KAAK,OACL2B,MAAON,EACPO,KAAK,aACLW,YAAY,kBACZf,SAAUA,IAEZ,yBAAK3B,UAAU,qBACb,4BACE+B,KAAK,cACLD,MAAOL,EACPE,SAAUA,GAEV,uCACA,0CACA,gDAKR,yBAAK3B,UAAU,4BACb,wBAAIA,UAAU,kBACX0B,EAAciB,KAAI,SAAA7C,GAAI,OACrB,kBAACD,EAAD,CACE+C,IAAK9C,EAAK+C,GACV/C,KAAMA,EACNC,aAAcA,cAtG9B,GAA8B+C,cCFjBC,G,MAAb,4MACEzB,MAAQ,CACN0B,KAAM,MAFV,uDAKE,WACEb,KAAKc,aANT,gCASE,SAAmBb,GACbA,EAAU5B,SAAW2B,KAAKK,MAAMhC,QAClC2B,KAAKc,aAXX,6DAeE,4BAAAtC,EAAA,sEACqBS,EAAQe,KAAKK,MAAMhC,QADxC,OACQwC,EADR,OAGEb,KAAKH,SAAS,CAAEgB,SAHlB,gDAfF,0EAqBE,WAAU,IAAD,EACqBb,KAAKK,MAAzBhC,EADD,EACCA,OAAQ0C,EADT,EACSA,QACRF,EAASb,KAAKb,MAAd0B,KAER,OAAKA,EAKH,yBAAKhD,UAAU,eACb,wBAAIA,UAAU,sBACZ,wDACsBQ,KAIxB,wBAAIR,UAAU,qBAAqBgD,EAAKjB,MACxC,uBAAG/B,UAAU,sBAAsBgD,EAAKG,OACxC,uBAAGnD,UAAU,sBAAsBgD,EAAKI,OACxC,4BACEjD,KAAK,SACLH,UAAU,iBACVO,QAAS,kBAAM2C,MAHjB,UAdM,mDA1Bd,GAAiCJ,cC2ClBO,E,4MAxCb/B,MAAQ,CACNgC,eAAgB,G,EAGlBC,WAAa,SAAC/C,GACZ,EAAKwB,SAAS,CAAEsB,eAAgB9C,K,EAGlCgD,YAAc,WACZ,EAAKxB,SAAS,CAAEsB,eAAgB,K,4CAGlC,WAAU,IACAA,EAAmBnB,KAAKb,MAAxBgC,eACAC,EAA4BpB,KAA5BoB,WAAYC,EAAgBrB,KAAhBqB,YAEpB,OACE,yBAAKxD,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACED,aAAcwD,EACdD,eAAgBA,KAIpB,yBAAKtD,UAAU,gBACb,yBAAKA,UAAU,0BACZsD,EACC,kBAAC,EAAD,CACE9C,OAAQ8C,EACRJ,QAASM,IAET,0B,GAjCEC,IAAMX,WCHxBY,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.3862cbd9.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function Todo({ todo, selectedUser}) {\n  return (\n    <li className={classNames(\n      'TodoList__item',\n      { 'TodoList__item--unchecked': todo.completed },\n      { 'TodoList__item--checked': !todo.completed },\n    )}\n    >\n      <label>\n        <input\n          type=\"checkbox\"\n          readOnly\n          checked={!todo.completed}\n        />\n        <p>{todo.title}</p>\n      </label>\n\n      <button\n        className=\"\n          TodoList__user-button\n          TodoList__user-button--selected\n          button\n        \"\n        type=\"button\"\n        onClick={() => selectedUser(todo.userId)}\n      >\n        User&nbsp;#\n        {todo.userId}\n      </button>\n    </li>\n  );\n}\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    completed: PropTypes.bool,\n    createdAt: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    updatedAt: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number,\n  }).isRequired,\n  selectedUser: PropTypes.func.isRequired,\n};\n","const BASE__URL = 'https://mate-api.herokuapp.com/';\n\nconst request = async(url) => {\n  const response = await fetch(`${BASE__URL}${url}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}`);\n  }\n\n  return response.json();\n};\n\nexport const getTodos = async() => {\n  const response = await request('todos');\n\n  return response.data;\n};\n\nexport const getUser = async(userId) => {\n  const response = await request(`users/${userId}`);\n\n  return response.data;\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\nimport { getTodos } from '../../API/api';\n\nimport './TodoList.scss';\n\nexport class TodoList extends Component {\n  state = {\n    todos: [],\n    inputValue: '',\n    selectValue: '',\n    preparedTodos: [],\n  }\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({\n      todos, preparedTodos: todos,\n    });\n  }\n\n  onChange = (e) => {\n    const { value, name, type } = e.target;\n\n    this.setState({ [name]: value });\n\n    switch (type) {\n      case 'text':\n        return this.filterByTitle();\n\n      default:\n        return this.selectCategory(value);\n    }\n  }\n\n  filterByTitle() {\n    this.setState(prevState => ({\n      preparedTodos: prevState.todos.filter(\n        todo => ((todo.title !== null)\n          ? todo.title.includes(prevState.inputValue)\n          : null),\n      ),\n    }));\n  }\n\n  selectCategory(property) {\n    switch (property) {\n      case 'completed':\n        this.setState(prevState => ({\n          preparedTodos: prevState.todos.filter(\n            todo => !todo.completed,\n          ),\n        }));\n        break;\n\n      case 'active':\n        this.setState(prevState => ({\n          preparedTodos: prevState.todos.filter(\n            todo => todo.completed,\n          ),\n        }));\n        break;\n\n      default:\n        this.setState(prevState => ({\n          preparedTodos: [...prevState.todos],\n        }));\n    }\n  }\n\n  render() {\n    const { selectedUser } = this.props;\n    const { todos, selectValue, inputValue, preparedTodos } = this.state;\n    const { onChange } = this;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        {todos.length > 0 && (\n          <>\n            <input\n              className=\"input is-rounded\"\n              type=\"text\"\n              value={inputValue}\n              name=\"inputValue\"\n              placeholder=\"type title here\"\n              onChange={onChange}\n            />\n            <div className=\"select is-rounded\">\n              <select\n                name=\"selectValue\"\n                value={selectValue}\n                onChange={onChange}\n              >\n                <option>all</option>\n                <option>active</option>\n                <option>completed</option>\n              </select>\n            </div>\n          </>\n        )}\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {preparedTodos.map(todo => (\n              <Todo\n                key={todo.id}\n                todo={todo}\n                selectedUser={selectedUser}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  selectedUser: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../API/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends Component {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { userId, onClear } = this.props;\n    const { user } = this.state;\n\n    if (!user) {\n      return (<span> Wait please </span>);\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user:  ${userId}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          className=\"button is-dark\"\n          onClick={() => onClear()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport 'bulma';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    selectedUserId: 0,\n  };\n\n  selectUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  clearUserId = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { selectedUserId } = this.state;\n    const { selectUser, clearUserId } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUser={selectUser}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClear={clearUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}